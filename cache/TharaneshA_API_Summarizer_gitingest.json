{"summary":"Repository: tharanesha/api_summarizer\nFiles analyzed: 20\n\nEstimated tokens: 11.8k","tree":"Directory structure:\n‚îî‚îÄ‚îÄ tharanesha-api_summarizer/\n    ‚îú‚îÄ‚îÄ README.md\n    ‚îú‚îÄ‚îÄ LICENSE\n    ‚îú‚îÄ‚îÄ api-summarizer-v1.0.0.zip\n    ‚îú‚îÄ‚îÄ bash.exe.stackdump\n    ‚îú‚îÄ‚îÄ manifest.json\n    ‚îú‚îÄ‚îÄ package.json\n    ‚îú‚îÄ‚îÄ popup.html\n    ‚îú‚îÄ‚îÄ postcss.config.js\n    ‚îú‚îÄ‚îÄ tailwind.config.js\n    ‚îú‚îÄ‚îÄ utputFormat\n    ‚îú‚îÄ‚îÄ vite.config.ts\n    ‚îú‚îÄ‚îÄ icons/\n    ‚îî‚îÄ‚îÄ src/\n        ‚îú‚îÄ‚îÄ background.ts\n        ‚îú‚îÄ‚îÄ config.ts\n        ‚îú‚îÄ‚îÄ content.ts\n        ‚îú‚îÄ‚îÄ popup/\n        ‚îÇ   ‚îú‚îÄ‚îÄ App.tsx\n        ‚îÇ   ‚îî‚îÄ‚îÄ index.tsx\n        ‚îú‚îÄ‚îÄ styles/\n        ‚îÇ   ‚îú‚îÄ‚îÄ animations.css\n        ‚îÇ   ‚îú‚îÄ‚îÄ popup.css\n        ‚îÇ   ‚îî‚îÄ‚îÄ tailwind.css\n        ‚îî‚îÄ‚îÄ types/\n            ‚îî‚îÄ‚îÄ window.d.ts\n","content":"================================================\nFile: README.md\n================================================\n# API Summarizer Chrome Extension\n\n<p align=\"center\">\n  <img src=\"https://github.com/user-attachments/assets/87e10646-a43a-423a-b2bc-98600b6880d9\" alt=\"API Summarizer Demo\" />\n</p>\n\n\n<h3 align=\"center\">Simplify API Documentation Instantly</h3>\n\n## Overview\n\nAPI Summarizer is a powerful Chrome extension designed to enhance your experience with API documentation. It uses Google's Gemini AI to summarize complex API documentation, making it easier to understand and navigate. The extension also provides a chat interface to ask questions about the documentation and a search feature to quickly find specific information.\n\n<h2>API Summarizer Demo</h2>\n\nhttps://github.com/user-attachments/assets/d129c36d-df07-4405-a48a-9cc5465c50a2\n\n## Features\n\n### üîç Smart Search\n- Search within API documentation pages\n- Highlight matching text with context\n- Navigate between search results with ease\n\n### ‚ú® AI-Powered Summaries\n- Select any text on an API documentation page\n- Get concise, accurate summaries using Gemini AI\n- Understand complex API concepts quickly\n\n### üí¨ Interactive Chat\n- Ask questions about the API documentation\n- Get detailed explanations and examples powered by Gemini AI\n- Maintain context throughout your conversation\n\n## Technology Stack\n\n- **Frontend**: TypeScript, React, TailwindCSS\n- **AI**: Google Gemini API for summarization and chat\n- **Build Tools**: Vite, PostCSS\n\n## Installation\n\n### Local Development\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/TharaneshA/API_Summarizer.git\n   cd API_Summarizer\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Create a `config.ts` file in the src directory with your Gemini API key:\n   ```typescript\n   export const GEMINI_API_KEY = 'your_api_key_here';\n   ```\n\n4. Build the extension:\n   ```bash\n   npm run build\n   ```\n\n5. Load the extension in Chrome:\n   - Open Chrome and navigate to `chrome://extensions/`\n   - Enable \"Developer mode\"\n   - Click \"Load unpacked\" and select the `dist` folder from your project directory\n\n### Using the Extension\n\n1. Navigate to any API documentation page\n2. Use the extension popup to:\n   - Select text and generate summaries\n   - Search within the documentation\n   - Ask questions about the API\n  \n   ![image](https://github.com/user-attachments/assets/1e944132-b9d5-4d2e-aab5-0145b0f87ca4)\n\n\n## Project Structure\n\n```\n‚îú‚îÄ‚îÄ dist/               # Built extension files\n‚îú‚îÄ‚îÄ icons/              # Extension icons\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ popup/          # React popup components\n‚îÇ   ‚îú‚îÄ‚îÄ styles/         # TailwindCSS styles\n‚îÇ   ‚îú‚îÄ‚îÄ background.ts   # Extension background script\n‚îÇ   ‚îú‚îÄ‚îÄ content.ts      # Content script for page interaction\n‚îÇ   ‚îî‚îÄ‚îÄ config.ts       # Configuration and API keys\n‚îú‚îÄ‚îÄ manifest.json       # Chrome extension manifest\n‚îú‚îÄ‚îÄ popup.html         # Popup HTML template\n‚îî‚îÄ‚îÄ vite.config.ts     # Vite configuration\n```\n\n## How It Works\n\n1. **Content Script**: Injects into web pages to handle text selection, search highlighting, and DOM manipulation\n2. **Background Script**: Manages API calls to Gemini AI and handles context menu operations\n3. **Popup Interface**: Provides a user-friendly interface for all extension features\n4. **Gemini AI Integration**: Processes text to generate summaries and answer questions\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgements\n\n- [Google Gemini](https://ai.google.dev/) for providing the AI capabilities\n- [React](https://reactjs.org/) for the frontend framework\n- [TailwindCSS](https://tailwindcss.com/) for styling\n\n\n\n================================================\nFile: LICENSE\n================================================\nMIT License\n\nCopyright (c) 2025 TharaneshA\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n================================================\nFile: api-summarizer-v1.0.0.zip\n================================================\n[Non-text file]\n\n\n================================================\nFile: bash.exe.stackdump\n================================================\nStack trace:\nFrame         Function      Args\n0007FFFFABC0  00021005FEBA (000210285F48, 00021026AB6E, 000000000000, 0007FFFF9AC0) msys-2.0.dll+0x1FEBA\n0007FFFFABC0  0002100467F9 (000000000000, 000000000000, 000000000000, 0007FFFFAE98) msys-2.0.dll+0x67F9\n0007FFFFABC0  000210046832 (000210285FF9, 0007FFFFAA78, 000000000000, 000000000000) msys-2.0.dll+0x6832\n0007FFFFABC0  000210068F86 (000000000000, 000000000000, 000000000000, 000000000000) msys-2.0.dll+0x28F86\n0007FFFFABC0  0002100690B4 (0007FFFFABD0, 000000000000, 000000000000, 000000000000) msys-2.0.dll+0x290B4\n0007FFFFAEA0  00021006A49D (0007FFFFABD0, 000000000000, 000000000000, 000000000000) msys-2.0.dll+0x2A49D\nEnd of stack trace\nLoaded modules:\n000100400000 bash.exe\n7FFB89850000 ntdll.dll\n7FFB88690000 KERNEL32.DLL\n7FFB87110000 KERNELBASE.dll\n7FFB88950000 USER32.dll\n7FFB86BF0000 win32u.dll\n7FFB88E20000 GDI32.dll\n7FFB86C20000 gdi32full.dll\n7FFB869E0000 msvcp_win.dll\n7FFB86E80000 ucrtbase.dll\n000210040000 msys-2.0.dll\n7FFB88B10000 advapi32.dll\n7FFB87700000 msvcrt.dll\n7FFB88D20000 sechost.dll\n7FFB86A80000 bcrypt.dll\n7FFB88830000 RPCRT4.dll\n7FFB85FF0000 CRYPTBASE.DLL\n7FFB86960000 bcryptPrimitives.dll\n7FFB876B0000 IMM32.DLL\n\n\n\n================================================\nFile: manifest.json\n================================================\n{\n  \"manifest_version\": 3,\n  \"name\": \"API Documentation Summarizer\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Summarize API documentation using AI and provide interactive assistance\",\n  \"permissions\": [\n    \"activeTab\",\n    \"storage\",\n    \"contextMenus\",\n    \"scripting\"\n  ],\n  \"host_permissions\": [\n    \"<all_urls>\"\n  ],\n  \"action\": {\n    \"default_popup\": \"popup.html\",\n    \"default_icon\": {\n      \"16\": \"icons/icon16.png\",\n      \"48\": \"icons/icon48.png\",\n      \"128\": \"icons/icon128.png\"\n    }\n  },\n  \"background\": {\n    \"service_worker\": \"background.js\",\n    \"type\": \"module\"\n  },\n  \"content_scripts\": [{\n    \"matches\": [\"<all_urls>\"],\n    \"js\": [\"content.js\"]\n  }],\n  \"icons\": {\n    \"16\": \"icons/icon16.png\",\n    \"48\": \"icons/icon48.png\",\n    \"128\": \"icons/icon128.png\"\n  }\n}\n\n\n================================================\nFile: package.json\n================================================\n{\n  \"name\": \"api-documentation-summarizer\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Chrome extension to summarize API documentation using AI\",\n  \"scripts\": {\n    \"dev\": \"vite\",\n    \"build\": \"vite build\",\n    \"watch\": \"vite build --watch\",\n    \"preview\": \"vite preview\"\n  },\n  \"dependencies\": {\n    \"@headlessui/react\": \"^1.7.17\",\n    \"@heroicons/react\": \"^2.0.18\",\n    \"cohere-ai\": \"^5.0.0\",\n    \"react\": \"^18.2.0\",\n    \"react-dom\": \"^18.2.0\",\n    \"react-markdown\": \"^9.0.1\",\n    \"react-syntax-highlighter\": \"^15.5.0\"\n  },\n  \"devDependencies\": {\n    \"@tailwindcss/typography\": \"^0.5.16\",\n    \"@types/chrome\": \"^0.0.254\",\n    \"@types/node\": \"^22.13.5\",\n    \"@types/react\": \"^18.2.43\",\n    \"@types/react-dom\": \"^18.2.17\",\n    \"@types/react-syntax-highlighter\": \"^15.5.13\",\n    \"@vitejs/plugin-react\": \"^4.2.1\",\n    \"autoprefixer\": \"^10.4.16\",\n    \"postcss\": \"^8.4.32\",\n    \"tailwindcss\": \"^3.3.6\",\n    \"typescript\": \"^5.3.3\",\n    \"vite\": \"^5.0.7\"\n  }\n}\n\n\n\n================================================\nFile: popup.html\n================================================\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>API Documentation Summarizer</title>\n</head>\n<body>\n  <div id=\"root\"></div>\n  <script type=\"module\" src=\"/src/popup/index.tsx\"></script>\n</body>\n</html>\n\n\n================================================\nFile: postcss.config.js\n================================================\nmodule.exports = {\n  plugins: {\n    'tailwindcss/nesting': {},\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n\n\n================================================\nFile: tailwind.config.js\n================================================\n/** @type {import('tailwindcss').Config} */\nexport default {\n  content: [\n    './popup.html',\n    './src/**/*.{js,ts,jsx,tsx}',\n  ],\n  darkMode: 'class',\n  theme: {\n    extend: {\n      width: {\n        'popup': '400px'\n      },\n      height: {\n        'popup': '600px'\n      },\n      colors: {\n        cohere: {\n          50: '#f5f8ff',\n          100: '#edf2ff',\n          200: '#dbe4ff',\n          300: '#bac8ff',\n          400: '#91a7ff',\n          500: '#5c7cff',\n          600: '#3b5bdb',\n          700: '#364fc7',\n          800: '#2f44ad',\n          900: '#283593'\n        }\n      },\n      fontFamily: {\n        sans: ['Inter var', 'sans-serif']\n      },\n      animation: {\n        'fade-in': 'fadeIn 0.3s ease-in-out',\n        'slide-up': 'slideUp 0.3s ease-out'\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0' },\n          '100%': { opacity: '1' }\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(10px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' }\n        }\n      }\n    },\n  },\n  plugins: [\n    require('@tailwindcss/typography')\n  ],\n}\n\n\n================================================\nFile: utputFormat\n================================================\nHTTP/1.1 422 Unprocessable Entity\ndate: Fri, 28 Feb 2025 07:43:16 GMT\nserver: uvicorn\ncontent-length: 124\ncontent-type: application/json\n\n{\"detail\":[{\"type\":\"json_invalid\",\"loc\":[\"body\",0],\"msg\":\"JSON decode error\",\"input\":{},\"ctx\":{\"error\":\"Expecting value\"}}]}\n\n\n================================================\nFile: vite.config.ts\n================================================\nimport { defineConfig } from 'vite'\nimport react from '@vitejs/plugin-react'\nimport { resolve } from 'path'\nimport fs from 'fs'\nimport path from 'path'\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    {\n      name: 'copy-manifest',\n      closeBundle() {\n        // Copy manifest.json\n        fs.copyFileSync(\n          path.resolve(__dirname, 'manifest.json'),\n          path.resolve(__dirname, 'dist/manifest.json')\n        )\n\n        // Copy config.env\n        fs.copyFileSync(\n          path.resolve(__dirname, 'config.env'),\n          path.resolve(__dirname, 'dist/config.env')\n        )\n\n        // Create icons directory\n        const iconDir = path.resolve(__dirname, 'dist/icons')\n        if (!fs.existsSync(iconDir)) {\n          fs.mkdirSync(iconDir)\n        }\n\n        // Copy icon files\n        const iconSizes = ['16', '48', '128']\n        iconSizes.forEach(size => {\n          fs.copyFileSync(\n            path.resolve(__dirname, `icons/icon${size}.png`),\n            path.resolve(__dirname, `dist/icons/icon${size}.png`)\n          )\n        })\n      }\n    }\n  ],\n  build: {\n    rollupOptions: {\n      input: {\n        popup: resolve(__dirname, 'popup.html'),\n        background: resolve(__dirname, 'src/background.ts'),\n        content: resolve(__dirname, 'src/content.ts')\n      },\n      output: {\n        entryFileNames: '[name].js',\n        chunkFileNames: 'assets/[name].js',\n        assetFileNames: 'assets/[name].[ext]'\n      }\n    },\n    outDir: 'dist',\n    sourcemap: true\n  }\n})\n\n\n\n================================================\nFile: src/background.ts\n================================================\nimport { GEMINI_API_KEY, API_CONFIG } from './config';\n\n// Create context menu item\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n  if (request.type === 'CREATE_CONTEXT_MENU') {\n    chrome.contextMenus.create({\n      id: 'summarizeApi',\n      title: 'Summarize API Documentation',\n      contexts: ['selection', 'page']\n    });\n  } else if (request.type === 'SUMMARIZE_TEXT') {\n    summarizeText(request.text)\n      .then(summary => sendResponse({ summary }))\n      .catch(error => sendResponse({ error: error.message }));\n    return true;\n  } else if (request.type === 'CHAT_MESSAGE') {\n    handleChatMessage(request.message)\n      .then(response => sendResponse({ response }))\n      .catch(error => sendResponse({ error: error.message }));\n    return true;\n  }\n});\n\n// Handle context menu clicks\nchrome.contextMenus.onClicked.addListener((info, tab) => {\n  if (info.menuItemId === 'summarizeApi' && tab?.id) {\n    chrome.tabs.sendMessage(tab.id, { type: 'GET_SELECTION' }, async (response) => {\n      if (response && response.text) {\n        try {\n          const summary = await summarizeText(response.text);\n          chrome.storage.local.set({ summary });\n        } catch (error) {\n          console.error('Error summarizing text:', error);\n          chrome.storage.local.set({ error: error.message });\n        }\n      }\n    });\n  }\n});\n\n// Function to summarize text using Gemini API\nasync function summarizeText(text: string): Promise<string> {\n  try {\n    if (!GEMINI_API_KEY) {\n      throw new Error('Gemini API key not initialized');\n    }\n\n    const prompt = `Please provide a concise summary of the following API documentation or technical text, focusing on the key points and main functionality:\\n\\n${text}`;\n\n    const response = await fetch(`${API_CONFIG.summarizeEndpoint}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{ text: prompt }]\n        }],\n        generationConfig: {\n          temperature: API_CONFIG.temperature,\n          topP: API_CONFIG.topP,\n          topK: API_CONFIG.topK,\n          maxOutputTokens: API_CONFIG.maxOutputTokens\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return result.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    throw error;\n  }\n}\n\n// Function to handle chat messages using Gemini API\nasync function handleChatMessage(message: string): Promise<string> {\n  try {\n    if (!GEMINI_API_KEY) {\n      throw new Error('Gemini API key not initialized');\n    }\n\n    const prompt = `You are an expert in API documentation and development. As a knowledgeable API specialist, please provide a detailed and accurate response to the following question about APIs, documentation, or development practices. Include relevant examples and best practices where appropriate.\\n\\nQuestion: ${message}`;\n\n    const response = await fetch(`${API_CONFIG.chatEndpoint}?key=${GEMINI_API_KEY}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        contents: [{\n          parts: [{ text: prompt }]\n        }],\n        generationConfig: {\n          temperature: API_CONFIG.temperature,\n          topP: API_CONFIG.topP,\n          topK: API_CONFIG.topK,\n          maxOutputTokens: API_CONFIG.maxOutputTokens\n        }\n      })\n    });\n\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n\n    const result = await response.json();\n    return result.candidates[0].content.parts[0].text;\n  } catch (error) {\n    console.error('Error calling Gemini API:', error);\n    throw error;\n  }\n}\n\n\n\n\n================================================\nFile: src/config.ts\n================================================\n// API Key\nexport const GEMINI_API_KEY = process.env.GEMINI_API_KEY || '';\n\n// API Configuration Types\ninterface ApiConfig {\n  summarizeEndpoint: string;\n  chatEndpoint: string;\n  maxOutputTokens: number;\n  temperature: number;\n  topP: number;\n  topK: number;\n}\n\n// API Endpoints and Settings\nexport const API_CONFIG: ApiConfig = {\n  summarizeEndpoint: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',\n  chatEndpoint: 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent',\n  maxOutputTokens: 1024,\n  temperature: 0.7,\n  topP: 0.8,\n  topK: 40\n};\n\n// Validate API key\nexport function validateApiKeys(): boolean {\n  return GEMINI_API_KEY.length > 0;\n}\n\n\n================================================\nFile: src/content.ts\n================================================\n/// <reference path=\"./types/window.d.ts\" />\n\n// Add styles for text selection and search highlight\nconst style = document.createElement('style');\nstyle.textContent = `\n::selection {\n  background-color: rgba(147, 51, 234, 0.4);\n  color: inherit;\n  text-shadow: none;\n}\n\n.api-search-highlight {\n  background-color: rgba(147, 51, 234, 0.3);\n  border-radius: 2px;\n  transition: background-color 0.3s ease;\n}\n\n.api-search-highlight.active {\n  background-color: rgba(147, 51, 234, 0.5);\n  outline: 2px solid rgba(147, 51, 234, 0.8);\n}\n\n.api-native-find-highlight {\n  background-color: rgba(255, 193, 7, 0.4) !important;\n  color: inherit !important;\n  border-radius: 2px !important;\n  padding: 2px 0 !important;\n}\n`;\ndocument.head.appendChild(style);\n\n// Store selected text\nlet lastSelectedText = '';\n\n// Update selected text when selection changes and notify popup\ndocument.addEventListener('selectionchange', () => {\n  const selection = window.getSelection();\n  if (selection) {\n    const newSelectedText = selection.toString().trim();\n    if (newSelectedText !== lastSelectedText) {\n      lastSelectedText = newSelectedText;\n      // Notify the popup about the new selection\n      chrome.runtime.sendMessage({\n        type: 'SELECTION_UPDATED',\n        text: lastSelectedText\n      });\n    }\n  }\n});\n\n// Initialize message listener when the content script loads\nlet isListenerInitialized = false;\n\nfunction initializeMessageListener() {\n  if (!isListenerInitialized) {\n    chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\n      if (request.type === 'GET_SELECTION') {\n        // Get the selected text from the page\n        let selectedText = '';\n        const selection = window.getSelection();\n        \n        if (selection && selection.rangeCount > 0) {\n          const range = selection.getRangeAt(0);\n          if (range.toString().trim()) {\n            selectedText = range.toString();\n          } else {\n            // If no text is currently selected, use the last selected text\n            selectedText = lastSelectedText;\n          }\n        }\n\n        sendResponse({ text: selectedText.trim() });\n        return true;\n      } else if (request.type === 'SEARCH_API_DOCS') {\n        const { searchQuery } = request;\n        try {\n          const results = searchInPage(searchQuery);\n          sendResponse({ results: results.results });\n        } catch (error) {\n          console.error('Error searching in page:', error);\n          sendResponse({ results: [], error: error.message });\n        }\n        return true; // Keep the message channel open for async response\n      } else if (request.type === 'SCROLL_TO_RESULT') {\n        const { elementId } = request;\n        const element = document.getElementById(elementId);\n        if (element) {\n          // Remove active class from all highlights\n          document.querySelectorAll('.api-search-highlight.active').forEach(el => {\n            el.classList.remove('active');\n          });\n          \n          // Add active class to current highlight\n          element.classList.add('active');\n          \n          // Scroll element into view with smooth behavior\n          element.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          sendResponse({ success: true });\n        } else {\n          sendResponse({ success: false });\n        }\n        return true;\n      } else if (request.type === 'CLEAR_HIGHLIGHTS') {\n        clearHighlights();\n        sendResponse({ success: true });\n        return true;\n\n      }\n      return true; // Required for async response\n    });\n\n    // Add context menu item\n    chrome.runtime.sendMessage({ type: 'CREATE_CONTEXT_MENU' });\n    isListenerInitialized = true;\n  }\n}\n\n// Function to search for text in the page\nfunction searchInPage(searchQuery: string) {\n  // Clear existing highlights first\n  clearHighlights();\n  \n  if (!searchQuery.trim()) {\n    return { results: [] };\n  }\n\n  // Use a combination of custom highlighting and browser's native find\n  const results: Array<{ id: string; text: string; context: string }> = [];\n  \n  try {\n    // First approach: Use browser's native find functionality\n    if (window.find) {\n      // Save current selection to restore later\n      const selection = window.getSelection();\n      let originalRange: Range | null = null;\n      if (selection && selection.rangeCount > 0) {\n        originalRange = selection.getRangeAt(0).cloneRange();\n      }\n      \n      // Clear any existing selection\n      if (selection) {\n        selection.removeAllRanges();\n      }\n      \n      // Use the browser's find functionality\n      const findOptions = {\n        caseSensitive: false,\n        backwards: false,\n        wrapAround: true,\n        wholeWord: false,\n        searchInFrames: true,\n        showDialog: false\n      };\n      \n      // Find all occurrences and highlight them\n      let found = window.find(searchQuery, findOptions.caseSensitive, findOptions.backwards, \n                            findOptions.wrapAround, findOptions.wholeWord, \n                            findOptions.searchInFrames, findOptions.showDialog);\n      \n      let resultIndex = 0;\n      let firstMatch: FirstMatch | null = null;\n      \n      // If found, create our custom highlight\n      while (found && resultIndex < 100) { // Limit to prevent infinite loops\n        const currentSelection = window.getSelection();\n        \n        if (currentSelection && currentSelection.rangeCount > 0) {\n          const range = currentSelection.getRangeAt(0);\n          const matchedText = range.toString();\n          \n          try {\n            // Create a span for highlighting\n            const span = document.createElement('span');\n            const uniqueId = `api-search-result-${resultIndex}`;\n            span.id = uniqueId;\n            span.className = 'api-search-highlight';\n            span.textContent = matchedText;\n            \n            // Save the first match to scroll to it later\n            if (resultIndex === 0) {\n              firstMatch = { element: span, range: range.cloneRange() };\n            }\n            \n            // Replace the selection with our highlighted span\n            range.deleteContents();\n            range.insertNode(span);\n            \n            // Get surrounding context\n            let contextNode = span.parentNode;\n            let context = contextNode ? (contextNode.textContent || '').trim() : '';\n            \n            // If context is too long, trim it\n            if (context.length > 100) {\n              const matchIndex = context.indexOf(matchedText);\n              if (matchIndex !== -1) { // Check if the text is found in the context\n                const start = Math.max(0, matchIndex - 50);\n                const end = Math.min(context.length, matchIndex + matchedText.length + 50);\n                context = '...' + context.substring(start, end) + '...';\n              } else {\n                // Fallback if the text isn't found in the context\n                context = context.substring(0, 100) + '...';\n              }\n            }\n            \n            results.push({\n              id: uniqueId,\n              text: matchedText,\n              context: context\n            });\n            \n            resultIndex++;\n          } catch (innerError) {\n            console.error('Error processing match:', innerError);\n          }\n          \n          // Continue searching for the next match\n          try {\n            found = window.find(searchQuery, findOptions.caseSensitive, findOptions.backwards, \n                              findOptions.wrapAround, findOptions.wholeWord, \n                              findOptions.searchInFrames, findOptions.showDialog);\n          } catch (findError) {\n            console.error('Error finding next match:', findError);\n            break;\n          }\n        } else {\n          break;\n        }\n      }\n      \n      // Restore original selection if there was one\n      try {\n        if (selection && originalRange) {\n          selection.removeAllRanges();\n          selection.addRange(originalRange);\n        }\n      } catch (restoreError) {\n        console.error('Error restoring original selection:', restoreError);\n      }\n      \n      // Scroll to the first match if found\n      if (firstMatch && firstMatch.element) {\n        try {\n          firstMatch.element.scrollIntoView({\n            behavior: 'smooth',\n            block: 'center'\n          });\n          firstMatch.element.classList.add('active');\n        } catch (scrollError) {\n          console.error('Error scrolling to match:', scrollError);\n        }\n      }\n    } else {\n      // Fallback to the original implementation if window.find is not available\n      const walker = document.createTreeWalker(\n        document.body,\n        NodeFilter.SHOW_TEXT,\n        null\n      );\n\n      let node: Node | null;\n      let resultIndex = 0;\n\n      while ((node = walker.nextNode())) {\n        const text = node.textContent || '';\n        const searchRegex = new RegExp(searchQuery, 'gi');\n        let match;\n\n        while ((match = searchRegex.exec(text)) !== null) {\n          try {\n            const range = document.createRange();\n            range.setStart(node, match.index);\n            range.setEnd(node, match.index + searchQuery.length);\n\n            const span = document.createElement('span');\n            const uniqueId = `api-search-result-${resultIndex}`;\n            span.id = uniqueId;\n            span.className = 'api-search-highlight';\n            span.textContent = match[0];\n\n            range.deleteContents();\n            range.insertNode(span);\n\n            // Get surrounding context\n            const contextStart = Math.max(0, match.index - 50);\n            const contextEnd = Math.min(text.length, match.index + searchQuery.length + 50);\n            const context = text.slice(contextStart, contextEnd);\n\n            results.push({\n              id: uniqueId,\n              text: match[0],\n              context: '...' + context + '...'\n            });\n\n            // Scroll to first result\n            if (resultIndex === 0) {\n              span.scrollIntoView({\n                behavior: 'smooth',\n                block: 'center'\n              });\n              span.classList.add('active');\n            }\n\n            resultIndex++;\n            \n            // Update the walker since we modified the DOM\n            walker.currentNode = span;\n          } catch (error) {\n            console.error('Error highlighting match:', error);\n            continue;\n          }\n        }\n      }\n    }\n  } catch (error) {\n    console.error('Search error:', error);\n  }\n\n  return { results };\n}\n\n// Function to clear all search highlights\nfunction clearHighlights() {\n  const highlights = document.querySelectorAll('.api-search-highlight');\n  highlights.forEach(highlight => {\n    const parent = highlight.parentNode;\n    if (parent) {\n      parent.replaceChild(document.createTextNode(highlight.textContent || ''), highlight);\n      parent.normalize();\n    }\n  });\n}\n\n// Initialize the message listener when the content script loads\ninitializeMessageListener();\n\n\n\n================================================\nFile: src/popup/App.tsx\n================================================\nimport React, { useState, useEffect, useRef } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport type { Components } from 'react-markdown';\nimport { \n  ChatBubbleLeftIcon, \n  DocumentTextIcon, \n  SparklesIcon, \n  ArrowPathIcon, \n  MagnifyingGlassIcon,\n  ArrowUturnLeftIcon\n} from '@heroicons/react/24/outline';\nimport '../styles/animations.css';\n\n// Define interface for search results\ninterface SearchResult {\n  id: string;\n  text: string;\n  context: string;\n}\n\n// Define interface for first match in search\ninterface FirstMatch {\n  element: HTMLElement;\n  range: Range;\n}\n\n// Define custom components for ReactMarkdown\nconst markdownComponents: Components = {\n  code: ({\n    node,\n    inline,\n    className,\n    children,\n    ...props\n  }: React.PropsWithChildren<{\n    node?: any;\n    inline?: boolean;\n    className?: string;\n  }>) => {\n    const match = /language-(\\w+)/.exec(className || '');\n    return !inline && match ? (\n      <SyntaxHighlighter\n        style={vscDarkPlus as any}\n        language={match[1]}\n        PreTag=\"div\"\n        children={String(children).replace(/\\n$/, '')}\n        {...props}\n      />\n    ) : (\n      <code className={className} {...props}>\n        {children}\n      </code>\n    );\n  }\n};\n\ninterface Message {\n  role: 'user' | 'assistant';\n  content: string;\n}\n\nconst App: React.FC = () => {\n  const [selectedText, setSelectedText] = useState<string>('');\n  const [summary, setSummary] = useState<string>('');\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState<string>('');\n  const [loading, setLoading] = useState<boolean>(false);\n  const [searchLoading, setSearchLoading] = useState<boolean>(false);\n  const [activeTab, setActiveTab] = useState<'summary' | 'chat' | 'search'>('summary');\n  const [searchQuery, setSearchQuery] = useState<string>('');\n  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  // Listen for selection updates from content script\n  useEffect(() => {\n    const handleSelectionUpdate = (message: any) => {\n      if (message.type === 'SELECTION_UPDATED') {\n        setSelectedText(message.text);\n      }\n    };\n    chrome.runtime.onMessage.addListener(handleSelectionUpdate);\n    return () => chrome.runtime.onMessage.removeListener(handleSelectionUpdate);\n  }, []);\n\n  useEffect(() => {\n    // Get the stored summary when popup opens\n    chrome.storage.local.get(['summary'], (result) => {\n      if (result.summary) {\n        setSummary(result.summary);\n      }\n    });\n\n    // Get the selected text from the active tab\n    refreshSelectedText();\n  }, []);\n\n  // Render the main content area\n  const renderMainContent = () => {\n    switch (activeTab) {\n      case 'summary':\n        return (\n          <div className=\"p-4 space-y-4\">\n            <div className=\"bg-gray-800 p-4 rounded-lg shadow-inner\">\n              <div className=\"flex items-center space-x-2 mb-2\">\n                <DocumentTextIcon className=\"h-5 w-5 text-purple-400\" />\n                <h2 className=\"text-lg font-medium text-white\">Selected Text</h2>\n              </div>\n              <p className=\"text-gray-300 text-sm whitespace-pre-wrap font-mono bg-gray-900 p-3 rounded\">\n                {selectedText || 'No text selected. Select text on the page to get started.'}\n              </p>\n            </div>\n            <div className=\"bg-gray-800 p-4 rounded-lg shadow-inner\">\n              <div className=\"flex items-center justify-between mb-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <SparklesIcon className=\"h-5 w-5 text-purple-400\" />\n                  <h2 className=\"text-lg font-medium text-white\">Summary</h2>\n                </div>\n                <button\n                  onClick={() => summarizeText(selectedText)}\n                  disabled={!selectedText || loading}\n                  className={`px-4 py-2 rounded-md flex items-center space-x-2 ${!selectedText || loading ? 'bg-gray-700 text-gray-400' : 'bg-purple-500 hover:bg-purple-600 text-white'} transition-colors`}\n                >\n                  {loading ? (\n                    <ArrowPathIcon className=\"h-5 w-5 animate-spin\" />\n                  ) : (\n                    <SparklesIcon className=\"h-5 w-5\" />\n                  )}\n                  <span>Summarize</span>\n                </button>\n              </div>\n              {summary ? (\n                <div className=\"prose prose-invert max-w-none\">\n                  <ReactMarkdown components={markdownComponents}>{summary}</ReactMarkdown>\n                </div>\n              ) : (\n                <div className=\"text-center py-8\">\n                  <SparklesIcon className=\"h-12 w-12 text-gray-600 mx-auto mb-3\" />\n                  <p className=\"text-gray-400\">Select text and click Summarize to generate a summary</p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      case 'chat':\n        return (\n          <div className=\"flex flex-col h-full p-4\">\n            <div className=\"flex-1 overflow-y-auto space-y-4 mb-4\">\n              {messages.map((message, index) => (\n                <div\n                  key={index}\n                  className={`flex ${message.role === 'user' ? 'justify-end' : 'justify-start'}`}\n                >\n                  <div\n                    className={`max-w-[80%] rounded-lg p-3 ${message.role === 'user' ? 'bg-purple-500 text-white' : 'bg-gray-800 text-gray-300'}`}\n                  >\n                    <ReactMarkdown components={markdownComponents}>{message.content}</ReactMarkdown>\n                  </div>\n                </div>\n              ))}\n              <div ref={messagesEndRef} />\n            </div>\n          </div>\n        );\n      case 'search':\n        return (\n          <div className=\"flex flex-col h-full p-4\">\n            <div className=\"flex space-x-2 mb-4\">\n              <input\n                type=\"text\"\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                placeholder=\"Search in API documentation...\"\n                className=\"flex-1 bg-gray-800 text-white rounded-lg px-4 py-2 focus:outline-none focus:ring-2 focus:ring-purple-500\"\n              />\n              <button\n                onClick={handleSearch}\n                disabled={searchLoading}\n                className={`px-4 py-2 rounded-lg ${searchLoading ? 'bg-gray-700 text-gray-400' : 'bg-purple-500 hover:bg-purple-600 text-white'} transition-colors`}\n              >\n                {searchLoading ? (\n                  <ArrowPathIcon className=\"h-5 w-5 animate-spin\" />\n                ) : (\n                  <MagnifyingGlassIcon className=\"h-5 w-5\" />\n                )}\n              </button>\n            </div>\n            <div className=\"flex-1 overflow-y-auto space-y-2\">\n              {searchResults.map((result) => (\n                <div\n                  key={result.id}\n                  onClick={() => handleSearchResultClick(result.id)}\n                  className=\"bg-gray-800 p-3 rounded-lg cursor-pointer hover:bg-gray-700 transition-colors\"\n                >\n                  <div className=\"text-sm text-gray-300\">{result.text}</div>\n                  <div className=\"text-xs text-gray-500 mt-1\">{result.context}</div>\n                </div>\n              ))}\n              {searchResults.length === 0 && searchQuery && !searchLoading && (\n                <div className=\"text-center py-8\">\n                  <MagnifyingGlassIcon className=\"h-12 w-12 text-gray-600 mx-auto mb-3\" />\n                  <p className=\"text-gray-400\">No results found</p>\n                </div>\n              )}\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n  \n  // Refresh selected text from the active tab\n  const refreshSelectedText = () => {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (tabs[0]?.id) {\n        chrome.tabs.sendMessage(tabs[0].id, { type: 'GET_SELECTION' }, (response) => {\n          if (response && response.text) {\n            setSelectedText(response.text);\n          }\n        });\n      }\n    });\n  };\n  \n  // Scroll to bottom of messages when new messages are added\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  const summarizeText = async (text: string) => {\n    if (!text.trim()) return;\n    \n    setLoading(true);\n    try {\n      chrome.runtime.sendMessage(\n        { type: 'SUMMARIZE_TEXT', text },\n        (response) => {\n          if (response && response.summary) {\n            setSummary(response.summary);\n          } else if (response && response.error) {\n            console.error('Error:', response.error);\n          }\n          setLoading(false);\n        }\n      );\n    } catch (error) {\n      console.error('Error summarizing text:', error);\n      setLoading(false);\n    }\n  };\n\n  const handleSendMessage = async () => {\n    if (!input.trim()) return;\n\n    const newMessage: Message = { role: 'user', content: input };\n    setMessages([...messages, newMessage]);\n    setInput('');\n    setLoading(true);\n\n    try {\n      // Send chat message with Gemini's built-in knowledge\n      chrome.runtime.sendMessage(\n        { \n          type: 'CHAT_MESSAGE', \n          message: input\n        },\n        (response) => {\n          if (response && response.response) {\n            setMessages(prev => [...prev, { role: 'assistant', content: response.response }]);\n          } else if (response && response.error) {\n            setMessages(prev => [...prev, { role: 'assistant', content: 'I apologize, but I encountered an error. Please try again.' }]);\n            console.error('Error:', response.error);\n          }\n          setLoading(false);\n        }\n      );\n    } catch (error) {\n      console.error('Error sending message:', error);\n      setMessages(prev => [...prev, { role: 'assistant', content: 'I apologize, but I encountered an error. Please try again.' }]);\n      setLoading(false);\n    }\n  };\n\n  // Define navigation tabs\nconst tabs = [\n  { id: 'summary' as const, icon: DocumentTextIcon, label: 'Summary' },\n  { id: 'chat' as const, icon: ChatBubbleLeftIcon, label: 'Chat' },\n  { id: 'search' as const, icon: MagnifyingGlassIcon, label: 'Search' }\n];\n\n\n// Render the app\nconst handleSearch = () => {\n  if (!searchQuery.trim()) return;\n    \n    setSearchLoading(true);\n    setSearchResults([]);\n    \n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (tabs[0]?.id) {\n        chrome.tabs.sendMessage(\n          tabs[0].id,\n          { type: 'SEARCH_API_DOCS', searchQuery },\n          (response) => {\n            if (response && response.results) {\n              setSearchResults(response.results);\n            }\n            setSearchLoading(false);\n          }\n        );\n      }\n    });\n  };\n\n  const handleSearchResultClick = (resultId: string) => {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n      if (tabs[0]?.id) {\n        chrome.tabs.sendMessage(\n          tabs[0].id,\n          { type: 'SCROLL_TO_RESULT', elementId: resultId }\n        );\n      }\n    });\n  };\n\n  return (\n    <div className=\"w-popup h-popup flex flex-col bg-gray-900 text-white\">\n      {/* Header */}\n      <div className=\"header-gradient p-6\">\n        <div className=\"flex flex-col space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <SparklesIcon className=\"w-8 h-8 text-purple-400 icon-rotate\" />\n            <div className=\"flex flex-col\">\n              <h1 className=\"text-2xl font-bold text-white tracking-wide\">API Summarizer</h1>\n              <p className=\"text-sm text-purple-200/80\">Simplify documentation instantly</p>\n            </div>\n          </div>\n          <div className=\"flex space-x-1 bg-gray-800/30 rounded-lg p-1\">\n            {tabs.map(({ id, icon: Icon, label }) => (\n              <button\n                key={id}\n                onClick={() => setActiveTab(id)}\n                className={`flex-1 flex items-center justify-center space-x-2 py-2 px-3 rounded-md transition-all ${activeTab === id ? 'bg-purple-500 text-white' : 'text-gray-300 hover:bg-gray-700/50'}`}\n              >\n                <Icon className=\"h-5 w-5\" />\n                <span>{label}</span>\n              </button>\n            ))}\n          </div>\n        </div>\n      </div>\n\n      {/* Main content area */}\n      <div className=\"flex-1 overflow-y-auto scrollbar-custom\">\n        {renderMainContent()}\n      </div>\n\n      {/* Chat input field - only visible in chat tab */}\n      {activeTab === 'chat' && (\n        <div className=\"p-4 border-t border-gray-700 bg-gray-800\">\n          <div className=\"flex gap-2\">\n            <input\n              type=\"text\"\n              value={input}\n              onChange={(e) => setInput(e.target.value)}\n              placeholder=\"Ask a question about the documentation...\"\n              className=\"modern-input text-sm\"\n              onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}\n              disabled={loading}\n            />\n            <button\n              onClick={handleSendMessage}\n              disabled={loading}\n              className=\"modern-button disabled:opacity-50 w-10 h-10 flex items-center justify-center\"\n            >\n              {loading ? (\n                <ArrowPathIcon className=\"w-5 h-5 animate-spin\" />\n              ) : (\n                <ChatBubbleLeftIcon className=\"w-5 h-5\" />\n              )}\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n\n\n\n================================================\nFile: src/popup/index.tsx\n================================================\nimport React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport App from './App';\nimport '../styles/tailwind.css';\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n\n================================================\nFile: src/styles/animations.css\n================================================\n@keyframes gradientBg {\n  0% { background-position: 0% 50%; }\n  50% { background-position: 100% 50%; }\n  100% { background-position: 0% 50%; }\n}\n\n@keyframes pulseGlow {\n  0% { box-shadow: 0 0 5px rgba(147, 51, 234, 0.2); }\n  50% { box-shadow: 0 0 15px rgba(147, 51, 234, 0.4); }\n  100% { box-shadow: 0 0 5px rgba(147, 51, 234, 0.2); }\n}\n\n@keyframes slideIn {\n  from { transform: translateY(20px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n@keyframes fadeScale {\n  from { transform: scale(0.95); opacity: 0; }\n  to { transform: scale(1); opacity: 1; }\n}\n\n.gradient-bg {\n  background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #1a1a2e 100%);\n}\n\n.modern-card {\n  @apply bg-gray-800 border border-gray-700 p-4;\n  animation: fadeScale 0.3s ease-out;\n}\n\n.modern-button {\n  @apply px-4 py-2 bg-purple-600 text-white font-medium text-sm transition-all duration-300;\n  background: linear-gradient(45deg, #6b21a8, #7e22ce);\n  background-size: 200% 200%;\n  animation: gradientBg 4s ease infinite;\n}\n\n.modern-button:hover {\n  @apply transform scale-105;\n  animation: pulseGlow 2s infinite;\n}\n\n.modern-input {\n  @apply w-full px-4 py-2 bg-gray-800 border border-gray-700 text-white placeholder-gray-400 focus:outline-none focus:border-purple-500 transition-colors duration-300;\n}\n\n.animate-slide-up {\n  animation: slideIn 0.4s ease-out;\n}\n\n.animate-fade-in {\n  animation: fadeScale 0.3s ease-out;\n}\n\n.w-popup {\n  width: 400px;\n}\n\n.h-popup {\n  height: 600px;\n}\n\n\n================================================\nFile: src/styles/popup.css\n================================================\n/* Popup dimensions and layout */\n.w-popup {\n  width: 480px;\n  min-width: 400px;\n  max-width: 600px;\n}\n\n.h-popup {\n  height: 600px;\n  min-height: 400px;\n  max-height: 800px;\n}\n\n/* Custom scrollbar styles */\n.scrollbar-custom {\n  scrollbar-width: thin;\n  scrollbar-color: rgba(147, 51, 234, 0.5) rgba(31, 41, 55, 0.5);\n}\n\n.scrollbar-custom::-webkit-scrollbar {\n  width: 8px;\n}\n\n.scrollbar-custom::-webkit-scrollbar-track {\n  background: rgba(31, 41, 55, 0.5);\n  border-radius: 4px;\n}\n\n.scrollbar-custom::-webkit-scrollbar-thumb {\n  background: rgba(147, 51, 234, 0.5);\n  border-radius: 4px;\n}\n\n.scrollbar-custom::-webkit-scrollbar-thumb:hover {\n  background: rgba(147, 51, 234, 0.7);\n}\n\n/* Header gradient and animations */\n.header-gradient {\n  background: linear-gradient(135deg, rgba(91, 33, 182, 0.4) 0%, rgba(109, 40, 217, 0.2) 100%);\n  border-bottom: 1px solid rgba(147, 51, 234, 0.2);\n  box-shadow: 0 4px 30px rgba(147, 51, 234, 0.1);\n  backdrop-filter: blur(10px);\n}\n\n/* Tab styles */\n.tab-active {\n  background: rgba(147, 51, 234, 0.2);\n  border-radius: 0.375rem;\n}\n\n\n================================================\nFile: src/styles/tailwind.css\n================================================\n@import url('https://fonts.googleapis.com/css2?family=Futura:wght@400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n@layer base {\n  html {\n    font-family: 'Futura', sans-serif;\n  }\n}\n\n@layer components {\n  .scrollbar-custom {\n    scrollbar-width: thin;\n    scrollbar-color: rgba(255, 255, 255, 0.1) transparent;\n  }\n\n  .scrollbar-custom::-webkit-scrollbar {\n    width: 4px;\n  }\n\n  .scrollbar-custom::-webkit-scrollbar-track {\n    background: transparent;\n  }\n\n  .scrollbar-custom::-webkit-scrollbar-thumb {\n    background-color: rgba(255, 255, 255, 0.1);\n    border-radius: 2px;\n  }\n\n  .prose-custom {\n    max-width: none;\n    color: #FFFFFF;\n  }\n\n  .prose-custom p {\n    margin-top: 1em;\n    margin-bottom: 1em;\n    line-height: 1.6;\n    opacity: 0.9;\n  }\n\n  .prose-custom ul {\n    list-style-type: disc;\n    padding-left: 1.5em;\n    margin-top: 1em;\n    margin-bottom: 1em;\n  }\n\n  .prose-custom li {\n    margin-top: 0.5em;\n    margin-bottom: 0.5em;\n    opacity: 0.9;\n  }\n\n  .prose-custom h1, .prose-custom h2, .prose-custom h3 {\n    color: #FFFFFF;\n    font-weight: 600;\n    margin-top: 1.5em;\n    margin-bottom: 0.5em;\n  }\n\n  .dark .prose-custom {\n    color: #FFFFFF;\n  }\n\n  .dark .prose-custom h1, \n  .dark .prose-custom h2, \n  .dark .prose-custom h3 {\n    color: #FFFFFF;\n  }\n\n  /* Modern UI Components */\n  .modern-input {\n    @apply bg-gray-900 border border-gray-700 rounded-xl px-4 py-2 text-white focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all duration-200;\n  }\n\n  .modern-button {\n    @apply bg-purple-600 text-white rounded-xl px-4 py-2 hover:bg-purple-700 focus:outline-none focus:ring-2 focus:ring-purple-500 transition-all duration-200;\n  }\n\n  .modern-card {\n    @apply bg-gray-800 rounded-xl p-4 border border-gray-700 shadow-lg hover:shadow-xl transition-all duration-200;\n  }\n}\n\n/* Custom styles */\n.w-popup {\n  width: 360px;\n}\n\n.h-popup {\n  height: 580px;\n}\n\n/* Animations */\n@keyframes fadeIn {\n  from { opacity: 0; }\n  to { opacity: 1; }\n}\n\n@keyframes slideUp {\n  from { transform: translateY(10px); opacity: 0; }\n  to { transform: translateY(0); opacity: 1; }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.3s ease-in-out;\n}\n\n.animate-slide-up {\n  animation: slideUp 0.3s ease-in-out;\n}\n\n\n================================================\nFile: src/types/window.d.ts\n================================================\ninterface Window {\n  find(\n    searchString: string,\n    caseSensitive?: boolean,\n    backwards?: boolean,\n    wrapAround?: boolean,\n    wholeWord?: boolean,\n    searchInFrames?: boolean,\n    showDialog?: boolean\n  ): boolean;\n}\n\ninterface FirstMatch {\n  element: HTMLSpanElement;\n  range: Range;\n}\n\n","timestamp":1746535478209,"files":[]}